<script>
/**
 * migop-uihelp.html - UI Helper Functions
 * Depends on: migop-base.html, migop-log.html, migop-main.html
 */
(function() {
  'use strict';
  
  if (!window.MIGOP || !window.MIGOP.Base || !window.MIGOP.Log || !window.MIGOP.Main) {
    throw new Error('migop-uihelp.html requires migop-base.html, migop-log.html, and migop-main.html');
  }
  
  var Base = window.MIGOP.Base;
  var Log = window.MIGOP.Log;
  var Main = window.MIGOP.Main;
  
  function UIHelper() {
    this.logger = Log.getLogger();
    this.logger.info('UIHelper', 'UI helper initialized');
  }
  
  UIHelper.prototype.copyLog = function() {
    this.logger.debug('UIHelper', 'Copy log requested');
    
    try {
      var logText = Main.getLogsAsText();
      
      if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(logText).then(function() {
          Main.updateStatus('Log copied to clipboard', 'success');
        }).catch(function(err) {
          this.fallbackCopyLog(logText);
        }.bind(this));
      } else {
        this.fallbackCopyLog(logText);
      }
      
      this.logger.info('UIHelper', 'Log copy initiated');
      
    } catch (error) {
      this.logger.error('UIHelper', 'Failed to copy log', error);
      Main.updateStatus('Failed to copy log', 'error');
    }
  };
  
  UIHelper.prototype.fallbackCopyLog = function(logText) {
    this.logger.debug('UIHelper', 'Using fallback copy method');
    
    try {
      var textarea = document.createElement('textarea');
      textarea.value = logText;
      textarea.style.position = 'fixed';
      textarea.style.opacity = '0';
      document.body.appendChild(textarea);
      textarea.select();
      
      var successful = document.execCommand('copy');
      document.body.removeChild(textarea);
      
      if (successful) {
        Main.updateStatus('Log copied to clipboard', 'success');
        this.logger.info('UIHelper', 'Fallback copy successful');
      } else {
        Main.updateStatus('Failed to copy log', 'error');
        this.logger.warn('UIHelper', 'Fallback copy failed');
      }
      
    } catch (error) {
      this.logger.error('UIHelper', 'Fallback copy exception', error);
      Main.updateStatus('Copy not supported in this browser', 'error');
    }
  };
  
  UIHelper.prototype.clearLog = function() {
    this.logger.debug('UIHelper', 'Clear log requested');
    
    try {
      Main.clearLogs();
      Main.updateStatus('Log cleared', 'info');
      this.logger.info('UIHelper', 'Log cleared successfully');
    } catch (error) {
      this.logger.error('UIHelper', 'Failed to clear log', error);
      Main.updateStatus('Failed to clear log', 'error');
    }
  };
  
  UIHelper.prototype.exportLog = function() {
    this.logger.debug('UIHelper', 'Export log requested');
    
    try {
      var logText = Main.getLogsAsText();
      var stats = Main.getStats();
      
      var exportContent = this.generateExportContent(logText, stats);
      var blob = new Blob([exportContent], { type: 'text/plain' });
      var url = URL.createObjectURL(blob);
      
      var timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      var filename = 'migop_editor_7_log_' + timestamp + '.txt';
      
      var a = document.createElement('a');
      a.href = url;
      a.download = filename;
      a.style.display = 'none';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      
      URL.revokeObjectURL(url);
      
      Main.updateStatus('Log exported: ' + filename, 'success');
      this.logger.info('UIHelper', 'Log exported successfully', { filename: filename });
      
    } catch (error) {
      this.logger.error('UIHelper', 'Failed to export log', error);
      Main.updateStatus('Failed to export log', 'error');
    }
  };
  
  UIHelper.prototype.generateExportContent = function(logText, stats) {
    var content = '';
    content += '='.repeat(80) + '\n';
    content += 'MIGOP Editor 7.0 - Log Export\n';
    content += '='.repeat(80) + '\n';
    content += 'Exported: ' + new Date().toISOString() + '\n';
    content += 'Total Log Entries: ' + (stats.logger ? stats.logger.totalLogs : 'Unknown') + '\n';
    content += 'Session Duration: ' + Base.formatElapsed(stats.logger ? stats.logger.sessionDuration : 0) + '\n';
    content += '\n';
    
    if (stats.pipeline) {
      content += 'Pipeline Statistics:\n';
      content += '- Total Runs: ' + stats.pipeline.totalPipelineRuns + '\n';
      content += '- Successful Runs: ' + stats.pipeline.successfulRuns + '\n';
      content += '- Errors: ' + stats.pipeline.errors + '\n';
      content += '- Average Processing Time: ' + Base.formatElapsed(stats.pipeline.averageProcessingTime) + '\n';
      content += '\n';
    }
    
    content += '='.repeat(80) + '\n';
    content += 'LOG ENTRIES\n';
    content += '='.repeat(80) + '\n';
    content += logText;
    
    return content;
  };
  
  UIHelper.prototype.updateModuleStatus = function() {
    this.logger.debug('UIHelper', 'Updating module status');
    
    var statusEl = document.getElementById('moduleStatus');
    var processBtn = document.getElementById('processBtn');
    
    if (statusEl && processBtn) {
      var loadedModules = Object.keys(window.MIGOP).length;
      var expectedModules = 8; // base, log, detection, xml, docx, pipe, main, uihelp
      
      if (loadedModules >= expectedModules) {
        statusEl.textContent = 'All modules loaded successfully (' + loadedModules + '/' + expectedModules + ')';
        statusEl.style.color = '#28a745';
        processBtn.disabled = false;
        processBtn.textContent = 'Process Document Suggestions';
        
        this.logger.info('UIHelper', 'All modules loaded successfully', {
          loadedModules: loadedModules,
          expectedModules: expectedModules
        });
      } else {
        statusEl.textContent = 'Module loading incomplete (' + loadedModules + '/' + expectedModules + ')';
        statusEl.style.color = '#dc3545';
        
        this.logger.warn('UIHelper', 'Module loading incomplete', {
          loadedModules: loadedModules,
          expectedModules: expectedModules
        });
      }
    }
  };
  
  UIHelper.prototype.showStats = function() {
    this.logger.debug('UIHelper', 'Show stats requested');
    
    try {
      var stats = Main.getStats();
      var statsText = JSON.stringify(stats, null, 2);
      
      var statsWindow = window.open('', '_blank', 'width=600,height=400');
      statsWindow.document.write('<html><head><title>MIGOP Editor 7.0 - Statistics</title></head>');
      statsWindow.document.write('<body><h2>MIGOP Editor 7.0 - Statistics</h2>');
      statsWindow.document.write('<pre>' + statsText + '</pre>');
      statsWindow.document.write('</body></html>');
      statsWindow.document.close();
      
      this.logger.info('UIHelper', 'Statistics window opened');
      
    } catch (error) {
      this.logger.error('UIHelper', 'Failed to show stats', error);
      Main.updateStatus('Failed to show statistics', 'error');
    }
  };
  
  var globalUIHelper = null;
  
  function getUIHelper() {
    if (!globalUIHelper) {
      globalUIHelper = new UIHelper();
    }
    return globalUIHelper;
  }
  
  window.MIGOP.UI = {
    UIHelper: UIHelper,
    getUIHelper: getUIHelper,
    
    copyLog: function() {
      return getUIHelper().copyLog();
    },
    
    clearLog: function() {
      return getUIHelper().clearLog();
    },
    
    exportLog: function() {
      return getUIHelper().exportLog();
    },
    
    updateModuleStatus: function() {
      return getUIHelper().updateModuleStatus();
    },
    
    showStats: function() {
      return getUIHelper().showStats();
    }
  };
  
  // Auto-update module status when this module loads
  setTimeout(function() {
    getUIHelper().updateModuleStatus();
  }, 100);
  
  console.log('[MIGOP] migop-uihelp.html loaded successfully');
})();
</script>
