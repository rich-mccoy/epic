<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub URL Mapper</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 40px auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            margin-bottom: 10px;
        }
        .subtitle {
            color: #666;
            margin-bottom: 30px;
        }
        .input-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #444;
        }
        input[type="text"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            font-family: monospace;
        }
        input[type="text"]:focus {
            outline: none;
            border-color: #0366d6;
        }
        button {
            background: #0366d6;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 4px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            margin-right: 10px;
        }
        button:hover {
            background: #0256b9;
        }
        button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        #status {
            margin: 20px 0;
            padding: 12px;
            border-radius: 4px;
            display: none;
        }
        #status.loading {
            display: block;
            background: #fff3cd;
            border: 1px solid #ffc107;
            color: #856404;
        }
        #status.success {
            display: block;
            background: #d4edda;
            border: 1px solid #28a745;
            color: #155724;
        }
        #status.error {
            display: block;
            background: #f8d7da;
            border: 1px solid #dc3545;
            color: #721c24;
        }
        #output {
            margin-top: 20px;
        }
        #urlList {
            background: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 15px;
            font-family: monospace;
            font-size: 12px;
            max-height: 500px;
            overflow-y: auto;
            white-space: pre-wrap;
            word-break: break-all;
        }
        .stats {
            margin: 15px 0;
            padding: 10px;
            background: #e7f3ff;
            border-radius: 4px;
            font-size: 14px;
        }
        .example {
            background: #f8f9fa;
            padding: 10px;
            border-left: 4px solid #0366d6;
            margin: 15px 0;
            font-size: 13px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸ“‚ GitHub URL Mapper</h1>
        <p class="subtitle">Generate a list of raw GitHub URLs from any repository</p>

        <div class="example">
            <strong>Example URL:</strong><br>
            https://github.com/rich-mccoy/epic/tree/main/migop-editor
        </div>

        <div class="input-group">
            <label for="repoUrl">GitHub Repository URL:</label>
            <input 
                type="text" 
                id="repoUrl" 
                placeholder="https://github.com/username/repo/tree/branch/path"
                value="">
        </div>

        <button onclick="generateUrls()" id="generateBtn">Generate URL Map</button>
        <button onclick="copyToClipboard()" id="copyBtn" style="display:none;">Copy to Clipboard</button>

        <div id="status"></div>

        <div id="output" style="display:none;">
            <div class="stats" id="stats"></div>
            <div id="urlList"></div>
        </div>
    </div>

    <script>
        let urlMap = '';

        function showStatus(message, type) {
            const status = document.getElementById('status');
            status.textContent = message;
            status.className = type;
        }

        function parseGitHubUrl(url) {
            // Parse GitHub URL to extract owner, repo, branch, and path
            const match = url.match(/github\.com\/([^\/]+)\/([^\/]+)(?:\/tree\/([^\/]+)(?:\/(.*))?)?/);
            
            if (!match) {
                throw new Error('Invalid GitHub URL format');
            }

            return {
                owner: match[1],
                repo: match[2],
                branch: match[3] || 'main',
                path: match[4] || ''
            };
        }

        async function generateUrls() {
            const input = document.getElementById('repoUrl').value.trim();
            
            if (!input) {
                showStatus('Please enter a GitHub URL', 'error');
                return;
            }

            try {
                showStatus('Fetching repository structure...', 'loading');
                document.getElementById('generateBtn').disabled = true;
                document.getElementById('output').style.display = 'none';

                const { owner, repo, branch, path } = parseGitHubUrl(input);
                
                // GitHub API endpoint for tree
                const apiUrl = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`;
                
                const response = await fetch(apiUrl);
                
                if (!response.ok) {
                    throw new Error(`GitHub API error: ${response.status}`);
                }

                const data = await response.json();
                
                // Filter files (not trees/folders) and filter by path if specified
                let files = data.tree.filter(item => item.type === 'blob');
                
                if (path) {
                    files = files.filter(item => item.path.startsWith(path));
                }

                // Generate raw URLs
                const urls = files.map(file => 
                    `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/${file.path}`
                );

                // Build output
                urlMap = urls.join('\n');
                
                document.getElementById('urlList').textContent = urlMap;
                document.getElementById('stats').textContent = 
                    `Found ${files.length} file(s) in ${owner}/${repo}${path ? '/' + path : ''}`;
                
                document.getElementById('output').style.display = 'block';
                document.getElementById('copyBtn').style.display = 'inline-block';
                
                showStatus('âœ“ URL map generated successfully!', 'success');
                
            } catch (error) {
                showStatus('Error: ' + error.message, 'error');
                console.error(error);
            } finally {
                document.getElementById('generateBtn').disabled = false;
            }
        }

        function copyToClipboard() {
            navigator.clipboard.writeText(urlMap).then(() => {
                const btn = document.getElementById('copyBtn');
                const originalText = btn.textContent;
                btn.textContent = 'âœ“ Copied!';
                setTimeout(() => {
                    btn.textContent = originalText;
                }, 2000);
            }).catch(err => {
                showStatus('Failed to copy to clipboard', 'error');
            });
        }

        // Allow Enter key to trigger generation
        document.getElementById('repoUrl').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                generateUrls();
            }
        });
    </script>
</body>
</html>
